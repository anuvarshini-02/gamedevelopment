<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Connect Four - Clean Version</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      text-align: center;
      background-color: #f7f7f7;
      margin-top: 30px;
    }
    h1 {
      color: #333;
    }
    #board {
      display: grid;
      grid-template-columns: repeat(7, 70px);
      grid-template-rows: repeat(6, 70px);
      gap: 5px;
      justify-content: center;
      margin: 20px auto;
      background-color: #005aa7;
      padding: 10px;
      border-radius: 10px;
    }
    .cell {
      width: 70px;
      height: 70px;
      background-color: #fff;
      border-radius: 50%;
      box-shadow: inset 0 0 5px rgba(0,0,0,0.3);
      cursor: pointer;
    }
    .red {
      background-color: #e74c3c;
    }
    .yellow {
      background-color: #f1c40f;
    }
    #message {
      font-size: 20px;
      margin: 15px 0;
    }
    button {
      padding: 10px 20px;
      background-color: #0077cc;
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <h1>Connect Four</h1>
  <div id="board"></div>
  <div id="message">ðŸ”´ Red's turn</div>
  <button onclick="resetGame()">Restart Game</button>

  <script>
    const rows = 6;
    const cols = 7;
    const boardEl = document.getElementById("board");
    const message = document.getElementById("message");

    let board = [];
    let currentPlayer = "red";
    let gameOver = false;

    function createBoard() {
      boardEl.innerHTML = '';
      board = [];

      for (let r = 0; r < rows; r++) {
        board[r] = [];
        for (let c = 0; c < cols; c++) {
          board[r][c] = '';
          const cell = document.createElement("div");
          cell.classList.add("cell");
          cell.dataset.row = r;
          cell.dataset.col = c;
          cell.addEventListener("click", () => makeMove(c));
          boardEl.appendChild(cell);
        }
      }
    }

    function makeMove(col) {
      if (gameOver) return;

      for (let row = rows - 1; row >= 0; row--) {
        if (board[row][col] === '') {
          board[row][col] = currentPlayer;
          const index = row * cols + col;
          boardEl.children[index].classList.add(currentPlayer);

          if (checkWinner(row, col)) {
            message.textContent = `ðŸŽ‰ ${currentPlayer.toUpperCase()} wins!`;
            gameOver = true;
          } else {
            currentPlayer = currentPlayer === 'red' ? 'yellow' : 'red';
            message.textContent = currentPlayer === 'red' ? "ðŸ”´ Red's turn" : "ðŸŸ¡ Yellow's turn";
          }
          break;
        }
      }
    }

    function checkWinner(r, c) {
      const directions = [
        [[0,1],[0,-1]],   // Horizontal
        [[1,0],[-1,0]],   // Vertical
        [[1,1],[-1,-1]],  // Diagonal â†˜
        [[1,-1],[-1,1]]   // Diagonal â†™
      ];

      for (let dir of directions) {
        let count = 1;
        for (let [dr, dc] of dir) {
          let row = r + dr, col = c + dc;
          while (
            row >= 0 && row < rows &&
            col >= 0 && col < cols &&
            board[row][col] === currentPlayer
          ) {
            count++;
            row += dr;
            col += dc;
          }
        }
        if (count >= 4) return true;
      }
      return false;
    }

    function resetGame() {
      currentPlayer = "red";
      gameOver = false;
      message.textContent = "ðŸ”´ Red's turn";
      createBoard();
    }

    createBoard();
  </script>

</body>
</html>